
 Exercicio 01 
 Desenvolva um smart contract que seja capaz de armazenar o nome,
 idade e nacionalidade de uma pessoa Brasileira em tres variaveis distintas.
 O contrato deve dar a cada uma das variaveis, respectivamente,
 as visibilidades de public, private, e internal. Os dados da pessoa deverao ser
 "Jeremias", para o nome, 10 para a idade, e true para a nacionalidade brasileira.
 ==================================================================================================================================
  Exercicio 02
  Desenvolva um smart contract que seja capaz de armazenar o nome,
  idade e nacionalidade de uma pessoa Brasileira em tres variaveis distintas.
  O contrato deve dar a cada uma das variaveis, respectivamente,
  as visibilidades de public, private, e internal. Os dados da pessoa deverao ser
  "Jeremias", para o nome, 10 para a idade, e true para a nacionalidade brasileira.
 
  Sugestoes
  Variaveis internal ou private do tipo int/string;
  Utilizar o metodo constructor();
  Crie funcoes setter & getter p/ cada variavel;
  criar funcoes de manipulacao aritmetica.
 ==================================================================================================================================
  Exercicio  03 
  Desenvolver um smart-contract que seja capaz de atribuir o estado
  escolar de um estudante a parti de sua nota. O estado deve ser inicializado
  com "empty", antes de qualquer interacao com o contrato.
 
  Quando a nota for enviada ao contrato, ele deve atribuir o estado do aluno
  seguindo as seguintes regras:
 
  I   - Caso a nota seja maior o igual a 7, o estado é "Aprovado";
  II  - Caso contrario, se a nota for inferior a 7, o estado e "Reprovado"
  III - Um caso especial de quando a pessoa reprovou, é quando a nota e igual
         a 0, aqui, o estado nao e "Reprovado", mais sim "Zero"
 ==================================================================================================================================
  Exercicio 04 
  Desenvolva um smart contract estitamente matematico que calcule o
  resultado do factorial de um numero N.
 ==================================================================================================================================
  Exercício: 05
  Crie um contrato chamado GradeBook que funcione como um registro de notas para estudantes. 
  Ele deve permitir adicionar e acessar notas de cada estudante.

  Requisitos:
  Adicionar Notas:

   - Crie uma função addGrade que permite registrar a nota de um estudante. 
     Cada estudante é identificado string.
   - Armazene as notas em um array para cada estudante.
   - Visualizar Notas:

   - Crie uma função getGrades que retorna todas as notas registradas para um estudante específico .
   - Visualizar Média:

   - Crie uma função getAverage que calcula e retorna a média das notas de um estudante específico.
   - Dicas:
   - Use um mapping para associar cada endereço a um array de notas.
   - Lembre-se de que os arrays em Solidity podem armazenar números inteiros, como uint.
 ==================================================================================================================================
  Exercício 06
  Desenvolva um smart contract que simule uma "Petição" on-line.
  Seu contrato deve coletar ao menos 3 nomes; todavia, caso sejam adicionados mais nomes,
  o contrato deve ser capaz de continuar recebendo esses nomes.
 
  - Os três primeiros nomes registrados no contrato devem ser armazenados em uma estrutura de dados
  separada dos demais nomes que seguirem.
  - Para cada nome adicionado, é preciso mapear o estado daquele nome junto à petição.
   Esse estado é composto por
  uma palavra (string) que pode ser alterada por qualquer usuário.
   O respectivo estado deve ser inicializado com
  a palavra "undefined".
  - outros estado "undefined", "signed", "pending"
==================================================================================================================================
Exercício 07
Sistema de Gerenciamento de Pedidos
Crie um contrato inteligente chamado OrderManager que gerencie pedidos de produtos. 
Cada pedido deve conter as seguintes informações:

ID do Pedido: um identificador único para cada pedido.
Nome do Produto: uma string representando o nome do produto.
Quantidade: um número inteiro sem sinal (uint) indicando a quantidade solicitada.
Endereço do Cliente: o endereço Ethereum do cliente que fez o pedido.
Status do Pedido: um estado que indica o progresso do pedido.
Para representar o Status do Pedido, utilize um enum com os seguintes estados:

Pendente
Processando
Enviado
Entregue
Cancelado
Utilize uma struct chamada Order para agrupar as informações de cada pedido.

Implemente as seguintes funcionalidades no contrato:

Adicionar Pedido: uma função que permite a criação de um novo pedido. A função deve receber 
como parâmetros o nome do produto e a quantidade. O ID do pedido deve ser gerado automaticamente,
 e o status inicial deve ser Pendente. O endereço do cliente deve ser o endereço que chamou a função.

Atualizar Status: uma função que permite ao proprietário do contrato atualizar o status de um 
pedido específico, passando o ID do pedido e o novo status como parâmetros.

Obter Detalhes do Pedido: uma função que retorna todas as informações de um pedido específico, dado o seu ID.

Listar Pedidos do Cliente: uma função que retorna uma lista de IDs de pedidos associados a um
 endereço de cliente específico.

Dicas:

Utilize um mapeamento (mapping) para armazenar os pedidos, onde a chave é o ID do pedido
 e o valor é a struct Order.

Utilize outro mapeamento para associar endereços de clientes a uma lista de IDs de pedidos que eles fizeram.

Considere implementar modificadores de função para restringir o acesso a certas funções apenas ao 
proprietário do contrato.

Lembre-se de validar os dados de entrada, como verificar se a quantidade é maior que zero e se o 
ID do pedido existe antes de atualizar ou recuperar informações.
==================================================================================================================================
Exercicio 08
Desenvolvar um smart contract que seja capaz de armazena um nome, idade, nacionalidade, notas, stados escolar  
de uma pessoa brasileira.
Os dados das pessoas deveran ser "" para o nome, 0 para idade, true para nacionalidade brasileira,
0 para notas e Udefine pra stado escolar.
O smart contract deve ser capaz, ainda de associar a pessoa, o estado da sua condicao escolar
a saber : Aprovado , Reprovado, Zero ou Undefined.
==================================================================================================================================
Exercicio 09
Invoque um price feed da rede ChaiLink para realizar a leitura do preco do ETH em relacao ao USD.
Para saber qual e o endereco do ultimo contrato publicado na rede Rinkeby, acesse htpps://docs.chain.link/docs/ethereum-addresses
Sempre que uma nova leitura for feita no oraculo, deve-se emitir um evento

==================================================================================================================================
