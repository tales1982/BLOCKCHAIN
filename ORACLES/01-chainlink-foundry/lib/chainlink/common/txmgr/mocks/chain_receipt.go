// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"
	chains "github.com/smartcontractkit/chainlink-framework/chains"

	mock "github.com/stretchr/testify/mock"
)

// ChainReceipt is an autogenerated mock type for the ChainReceipt type
type ChainReceipt[THASH chains.Hashable, BHASH chains.Hashable] struct {
	mock.Mock
}

type ChainReceipt_Expecter[THASH chains.Hashable, BHASH chains.Hashable] struct {
	mock *mock.Mock
}

func (_m *ChainReceipt[THASH, BHASH]) EXPECT() *ChainReceipt_Expecter[THASH, BHASH] {
	return &ChainReceipt_Expecter[THASH, BHASH]{mock: &_m.Mock}
}

// GetBlockHash provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) GetBlockHash() common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHash")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// ChainReceipt_GetBlockHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHash'
type ChainReceipt_GetBlockHash_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// GetBlockHash is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) GetBlockHash() *ChainReceipt_GetBlockHash_Call[THASH, BHASH] {
	return &ChainReceipt_GetBlockHash_Call[THASH, BHASH]{Call: _e.mock.On("GetBlockHash")}
}

func (_c *ChainReceipt_GetBlockHash_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_GetBlockHash_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_GetBlockHash_Call[THASH, BHASH]) Return(_a0 common.Hash) *ChainReceipt_GetBlockHash_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_GetBlockHash_Call[THASH, BHASH]) RunAndReturn(run func() common.Hash) *ChainReceipt_GetBlockHash_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// GetBlockNumber provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) GetBlockNumber() *big.Int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockNumber")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// ChainReceipt_GetBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockNumber'
type ChainReceipt_GetBlockNumber_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// GetBlockNumber is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) GetBlockNumber() *ChainReceipt_GetBlockNumber_Call[THASH, BHASH] {
	return &ChainReceipt_GetBlockNumber_Call[THASH, BHASH]{Call: _e.mock.On("GetBlockNumber")}
}

func (_c *ChainReceipt_GetBlockNumber_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_GetBlockNumber_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_GetBlockNumber_Call[THASH, BHASH]) Return(_a0 *big.Int) *ChainReceipt_GetBlockNumber_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_GetBlockNumber_Call[THASH, BHASH]) RunAndReturn(run func() *big.Int) *ChainReceipt_GetBlockNumber_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// GetEffectiveGasPrice provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) GetEffectiveGasPrice() *big.Int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEffectiveGasPrice")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// ChainReceipt_GetEffectiveGasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEffectiveGasPrice'
type ChainReceipt_GetEffectiveGasPrice_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// GetEffectiveGasPrice is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) GetEffectiveGasPrice() *ChainReceipt_GetEffectiveGasPrice_Call[THASH, BHASH] {
	return &ChainReceipt_GetEffectiveGasPrice_Call[THASH, BHASH]{Call: _e.mock.On("GetEffectiveGasPrice")}
}

func (_c *ChainReceipt_GetEffectiveGasPrice_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_GetEffectiveGasPrice_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_GetEffectiveGasPrice_Call[THASH, BHASH]) Return(_a0 *big.Int) *ChainReceipt_GetEffectiveGasPrice_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_GetEffectiveGasPrice_Call[THASH, BHASH]) RunAndReturn(run func() *big.Int) *ChainReceipt_GetEffectiveGasPrice_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// GetFeeUsed provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) GetFeeUsed() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFeeUsed")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// ChainReceipt_GetFeeUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeeUsed'
type ChainReceipt_GetFeeUsed_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// GetFeeUsed is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) GetFeeUsed() *ChainReceipt_GetFeeUsed_Call[THASH, BHASH] {
	return &ChainReceipt_GetFeeUsed_Call[THASH, BHASH]{Call: _e.mock.On("GetFeeUsed")}
}

func (_c *ChainReceipt_GetFeeUsed_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_GetFeeUsed_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_GetFeeUsed_Call[THASH, BHASH]) Return(_a0 uint64) *ChainReceipt_GetFeeUsed_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_GetFeeUsed_Call[THASH, BHASH]) RunAndReturn(run func() uint64) *ChainReceipt_GetFeeUsed_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// GetL1Fee provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) GetL1Fee() *big.Int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetL1Fee")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// ChainReceipt_GetL1Fee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetL1Fee'
type ChainReceipt_GetL1Fee_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// GetL1Fee is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) GetL1Fee() *ChainReceipt_GetL1Fee_Call[THASH, BHASH] {
	return &ChainReceipt_GetL1Fee_Call[THASH, BHASH]{Call: _e.mock.On("GetL1Fee")}
}

func (_c *ChainReceipt_GetL1Fee_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_GetL1Fee_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_GetL1Fee_Call[THASH, BHASH]) Return(_a0 *big.Int) *ChainReceipt_GetL1Fee_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_GetL1Fee_Call[THASH, BHASH]) RunAndReturn(run func() *big.Int) *ChainReceipt_GetL1Fee_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// GetRevertReason provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) GetRevertReason() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRevertReason")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// ChainReceipt_GetRevertReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRevertReason'
type ChainReceipt_GetRevertReason_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// GetRevertReason is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) GetRevertReason() *ChainReceipt_GetRevertReason_Call[THASH, BHASH] {
	return &ChainReceipt_GetRevertReason_Call[THASH, BHASH]{Call: _e.mock.On("GetRevertReason")}
}

func (_c *ChainReceipt_GetRevertReason_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_GetRevertReason_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_GetRevertReason_Call[THASH, BHASH]) Return(_a0 *string) *ChainReceipt_GetRevertReason_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_GetRevertReason_Call[THASH, BHASH]) RunAndReturn(run func() *string) *ChainReceipt_GetRevertReason_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) GetStatus() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// ChainReceipt_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type ChainReceipt_GetStatus_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) GetStatus() *ChainReceipt_GetStatus_Call[THASH, BHASH] {
	return &ChainReceipt_GetStatus_Call[THASH, BHASH]{Call: _e.mock.On("GetStatus")}
}

func (_c *ChainReceipt_GetStatus_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_GetStatus_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_GetStatus_Call[THASH, BHASH]) Return(_a0 uint64) *ChainReceipt_GetStatus_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_GetStatus_Call[THASH, BHASH]) RunAndReturn(run func() uint64) *ChainReceipt_GetStatus_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// GetTransactionIndex provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) GetTransactionIndex() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionIndex")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// ChainReceipt_GetTransactionIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionIndex'
type ChainReceipt_GetTransactionIndex_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// GetTransactionIndex is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) GetTransactionIndex() *ChainReceipt_GetTransactionIndex_Call[THASH, BHASH] {
	return &ChainReceipt_GetTransactionIndex_Call[THASH, BHASH]{Call: _e.mock.On("GetTransactionIndex")}
}

func (_c *ChainReceipt_GetTransactionIndex_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_GetTransactionIndex_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_GetTransactionIndex_Call[THASH, BHASH]) Return(_a0 uint) *ChainReceipt_GetTransactionIndex_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_GetTransactionIndex_Call[THASH, BHASH]) RunAndReturn(run func() uint) *ChainReceipt_GetTransactionIndex_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// GetTxHash provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) GetTxHash() common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTxHash")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// ChainReceipt_GetTxHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxHash'
type ChainReceipt_GetTxHash_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// GetTxHash is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) GetTxHash() *ChainReceipt_GetTxHash_Call[THASH, BHASH] {
	return &ChainReceipt_GetTxHash_Call[THASH, BHASH]{Call: _e.mock.On("GetTxHash")}
}

func (_c *ChainReceipt_GetTxHash_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_GetTxHash_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_GetTxHash_Call[THASH, BHASH]) Return(_a0 common.Hash) *ChainReceipt_GetTxHash_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_GetTxHash_Call[THASH, BHASH]) RunAndReturn(run func() common.Hash) *ChainReceipt_GetTxHash_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// IsUnmined provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) IsUnmined() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsUnmined")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ChainReceipt_IsUnmined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUnmined'
type ChainReceipt_IsUnmined_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// IsUnmined is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) IsUnmined() *ChainReceipt_IsUnmined_Call[THASH, BHASH] {
	return &ChainReceipt_IsUnmined_Call[THASH, BHASH]{Call: _e.mock.On("IsUnmined")}
}

func (_c *ChainReceipt_IsUnmined_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_IsUnmined_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_IsUnmined_Call[THASH, BHASH]) Return(_a0 bool) *ChainReceipt_IsUnmined_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_IsUnmined_Call[THASH, BHASH]) RunAndReturn(run func() bool) *ChainReceipt_IsUnmined_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// IsZero provides a mock function with no fields
func (_m *ChainReceipt[THASH, BHASH]) IsZero() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsZero")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ChainReceipt_IsZero_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsZero'
type ChainReceipt_IsZero_Call[THASH chains.Hashable, BHASH chains.Hashable] struct {
	*mock.Call
}

// IsZero is a helper method to define mock.On call
func (_e *ChainReceipt_Expecter[THASH, BHASH]) IsZero() *ChainReceipt_IsZero_Call[THASH, BHASH] {
	return &ChainReceipt_IsZero_Call[THASH, BHASH]{Call: _e.mock.On("IsZero")}
}

func (_c *ChainReceipt_IsZero_Call[THASH, BHASH]) Run(run func()) *ChainReceipt_IsZero_Call[THASH, BHASH] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainReceipt_IsZero_Call[THASH, BHASH]) Return(_a0 bool) *ChainReceipt_IsZero_Call[THASH, BHASH] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainReceipt_IsZero_Call[THASH, BHASH]) RunAndReturn(run func() bool) *ChainReceipt_IsZero_Call[THASH, BHASH] {
	_c.Call.Return(run)
	return _c
}

// NewChainReceipt creates a new instance of ChainReceipt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChainReceipt[THASH chains.Hashable, BHASH chains.Hashable](t interface {
	mock.TestingT
	Cleanup(func())
}) *ChainReceipt[THASH, BHASH] {
	mock := &ChainReceipt[THASH, BHASH]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
