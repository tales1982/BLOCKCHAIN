// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	registrysyncer "github.com/smartcontractkit/chainlink/v2/core/services/registrysyncer"
	mock "github.com/stretchr/testify/mock"
)

// RegistrySyncer is an autogenerated mock type for the RegistrySyncer type
type RegistrySyncer struct {
	mock.Mock
}

type RegistrySyncer_Expecter struct {
	mock *mock.Mock
}

func (_m *RegistrySyncer) EXPECT() *RegistrySyncer_Expecter {
	return &RegistrySyncer_Expecter{mock: &_m.Mock}
}

// AddListener provides a mock function with given fields: listeners
func (_m *RegistrySyncer) AddListener(listeners ...registrysyncer.Listener) {
	_va := make([]interface{}, len(listeners))
	for _i := range listeners {
		_va[_i] = listeners[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// RegistrySyncer_AddListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddListener'
type RegistrySyncer_AddListener_Call struct {
	*mock.Call
}

// AddListener is a helper method to define mock.On call
//   - listeners ...registrysyncer.Listener
func (_e *RegistrySyncer_Expecter) AddListener(listeners ...interface{}) *RegistrySyncer_AddListener_Call {
	return &RegistrySyncer_AddListener_Call{Call: _e.mock.On("AddListener",
		append([]interface{}{}, listeners...)...)}
}

func (_c *RegistrySyncer_AddListener_Call) Run(run func(listeners ...registrysyncer.Listener)) *RegistrySyncer_AddListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]registrysyncer.Listener, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(registrysyncer.Listener)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *RegistrySyncer_AddListener_Call) Return() *RegistrySyncer_AddListener_Call {
	_c.Call.Return()
	return _c
}

func (_c *RegistrySyncer_AddListener_Call) RunAndReturn(run func(...registrysyncer.Listener)) *RegistrySyncer_AddListener_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *RegistrySyncer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistrySyncer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type RegistrySyncer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *RegistrySyncer_Expecter) Close() *RegistrySyncer_Close_Call {
	return &RegistrySyncer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *RegistrySyncer_Close_Call) Run(run func()) *RegistrySyncer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RegistrySyncer_Close_Call) Return(_a0 error) *RegistrySyncer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RegistrySyncer_Close_Call) RunAndReturn(run func() error) *RegistrySyncer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// HealthReport provides a mock function with no fields
func (_m *RegistrySyncer) HealthReport() map[string]error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthReport")
	}

	var r0 map[string]error
	if rf, ok := ret.Get(0).(func() map[string]error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]error)
		}
	}

	return r0
}

// RegistrySyncer_HealthReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthReport'
type RegistrySyncer_HealthReport_Call struct {
	*mock.Call
}

// HealthReport is a helper method to define mock.On call
func (_e *RegistrySyncer_Expecter) HealthReport() *RegistrySyncer_HealthReport_Call {
	return &RegistrySyncer_HealthReport_Call{Call: _e.mock.On("HealthReport")}
}

func (_c *RegistrySyncer_HealthReport_Call) Run(run func()) *RegistrySyncer_HealthReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RegistrySyncer_HealthReport_Call) Return(_a0 map[string]error) *RegistrySyncer_HealthReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RegistrySyncer_HealthReport_Call) RunAndReturn(run func() map[string]error) *RegistrySyncer_HealthReport_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *RegistrySyncer) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RegistrySyncer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type RegistrySyncer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *RegistrySyncer_Expecter) Name() *RegistrySyncer_Name_Call {
	return &RegistrySyncer_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *RegistrySyncer_Name_Call) Run(run func()) *RegistrySyncer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RegistrySyncer_Name_Call) Return(_a0 string) *RegistrySyncer_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RegistrySyncer_Name_Call) RunAndReturn(run func() string) *RegistrySyncer_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *RegistrySyncer) Ready() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistrySyncer_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type RegistrySyncer_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *RegistrySyncer_Expecter) Ready() *RegistrySyncer_Ready_Call {
	return &RegistrySyncer_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *RegistrySyncer_Ready_Call) Run(run func()) *RegistrySyncer_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RegistrySyncer_Ready_Call) Return(_a0 error) *RegistrySyncer_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RegistrySyncer_Ready_Call) RunAndReturn(run func() error) *RegistrySyncer_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *RegistrySyncer) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistrySyncer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type RegistrySyncer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RegistrySyncer_Expecter) Start(ctx interface{}) *RegistrySyncer_Start_Call {
	return &RegistrySyncer_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *RegistrySyncer_Start_Call) Run(run func(ctx context.Context)) *RegistrySyncer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RegistrySyncer_Start_Call) Return(_a0 error) *RegistrySyncer_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RegistrySyncer_Start_Call) RunAndReturn(run func(context.Context) error) *RegistrySyncer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields: ctx, isInitialSync
func (_m *RegistrySyncer) Sync(ctx context.Context, isInitialSync bool) error {
	ret := _m.Called(ctx, isInitialSync)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, isInitialSync)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistrySyncer_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type RegistrySyncer_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx context.Context
//   - isInitialSync bool
func (_e *RegistrySyncer_Expecter) Sync(ctx interface{}, isInitialSync interface{}) *RegistrySyncer_Sync_Call {
	return &RegistrySyncer_Sync_Call{Call: _e.mock.On("Sync", ctx, isInitialSync)}
}

func (_c *RegistrySyncer_Sync_Call) Run(run func(ctx context.Context, isInitialSync bool)) *RegistrySyncer_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *RegistrySyncer_Sync_Call) Return(_a0 error) *RegistrySyncer_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RegistrySyncer_Sync_Call) RunAndReturn(run func(context.Context, bool) error) *RegistrySyncer_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegistrySyncer creates a new instance of RegistrySyncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistrySyncer(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegistrySyncer {
	mock := &RegistrySyncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
