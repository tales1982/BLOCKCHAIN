// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	billing "github.com/smartcontractkit/chainlink-protos/billing/go"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// BillingClient is an autogenerated mock type for the BillingClient type
type BillingClient struct {
	mock.Mock
}

type BillingClient_Expecter struct {
	mock *mock.Mock
}

func (_m *BillingClient) EXPECT() *BillingClient_Expecter {
	return &BillingClient_Expecter{mock: &_m.Mock}
}

// GetOrganizationCreditsByWorkflow provides a mock function with given fields: _a0, _a1
func (_m *BillingClient) GetOrganizationCreditsByWorkflow(_a0 context.Context, _a1 *billing.GetOrganizationCreditsByWorkflowRequest) (*billing.GetOrganizationCreditsByWorkflowResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationCreditsByWorkflow")
	}

	var r0 *billing.GetOrganizationCreditsByWorkflowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetOrganizationCreditsByWorkflowRequest) (*billing.GetOrganizationCreditsByWorkflowResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetOrganizationCreditsByWorkflowRequest) *billing.GetOrganizationCreditsByWorkflowResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.GetOrganizationCreditsByWorkflowResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetOrganizationCreditsByWorkflowRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BillingClient_GetOrganizationCreditsByWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationCreditsByWorkflow'
type BillingClient_GetOrganizationCreditsByWorkflow_Call struct {
	*mock.Call
}

// GetOrganizationCreditsByWorkflow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *billing.GetOrganizationCreditsByWorkflowRequest
func (_e *BillingClient_Expecter) GetOrganizationCreditsByWorkflow(_a0 interface{}, _a1 interface{}) *BillingClient_GetOrganizationCreditsByWorkflow_Call {
	return &BillingClient_GetOrganizationCreditsByWorkflow_Call{Call: _e.mock.On("GetOrganizationCreditsByWorkflow", _a0, _a1)}
}

func (_c *BillingClient_GetOrganizationCreditsByWorkflow_Call) Run(run func(_a0 context.Context, _a1 *billing.GetOrganizationCreditsByWorkflowRequest)) *BillingClient_GetOrganizationCreditsByWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.GetOrganizationCreditsByWorkflowRequest))
	})
	return _c
}

func (_c *BillingClient_GetOrganizationCreditsByWorkflow_Call) Return(_a0 *billing.GetOrganizationCreditsByWorkflowResponse, _a1 error) *BillingClient_GetOrganizationCreditsByWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BillingClient_GetOrganizationCreditsByWorkflow_Call) RunAndReturn(run func(context.Context, *billing.GetOrganizationCreditsByWorkflowRequest) (*billing.GetOrganizationCreditsByWorkflowResponse, error)) *BillingClient_GetOrganizationCreditsByWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowExecutionRates provides a mock function with given fields: _a0, _a1
func (_m *BillingClient) GetWorkflowExecutionRates(_a0 context.Context, _a1 *billing.GetWorkflowExecutionRatesRequest) (*billing.GetWorkflowExecutionRatesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowExecutionRates")
	}

	var r0 *billing.GetWorkflowExecutionRatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetWorkflowExecutionRatesRequest) (*billing.GetWorkflowExecutionRatesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetWorkflowExecutionRatesRequest) *billing.GetWorkflowExecutionRatesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.GetWorkflowExecutionRatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetWorkflowExecutionRatesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BillingClient_GetWorkflowExecutionRates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowExecutionRates'
type BillingClient_GetWorkflowExecutionRates_Call struct {
	*mock.Call
}

// GetWorkflowExecutionRates is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *billing.GetWorkflowExecutionRatesRequest
func (_e *BillingClient_Expecter) GetWorkflowExecutionRates(_a0 interface{}, _a1 interface{}) *BillingClient_GetWorkflowExecutionRates_Call {
	return &BillingClient_GetWorkflowExecutionRates_Call{Call: _e.mock.On("GetWorkflowExecutionRates", _a0, _a1)}
}

func (_c *BillingClient_GetWorkflowExecutionRates_Call) Run(run func(_a0 context.Context, _a1 *billing.GetWorkflowExecutionRatesRequest)) *BillingClient_GetWorkflowExecutionRates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.GetWorkflowExecutionRatesRequest))
	})
	return _c
}

func (_c *BillingClient_GetWorkflowExecutionRates_Call) Return(_a0 *billing.GetWorkflowExecutionRatesResponse, _a1 error) *BillingClient_GetWorkflowExecutionRates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BillingClient_GetWorkflowExecutionRates_Call) RunAndReturn(run func(context.Context, *billing.GetWorkflowExecutionRatesRequest) (*billing.GetWorkflowExecutionRatesResponse, error)) *BillingClient_GetWorkflowExecutionRates_Call {
	_c.Call.Return(run)
	return _c
}

// ReserveCredits provides a mock function with given fields: _a0, _a1
func (_m *BillingClient) ReserveCredits(_a0 context.Context, _a1 *billing.ReserveCreditsRequest) (*billing.ReserveCreditsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ReserveCredits")
	}

	var r0 *billing.ReserveCreditsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.ReserveCreditsRequest) (*billing.ReserveCreditsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.ReserveCreditsRequest) *billing.ReserveCreditsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.ReserveCreditsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.ReserveCreditsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BillingClient_ReserveCredits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReserveCredits'
type BillingClient_ReserveCredits_Call struct {
	*mock.Call
}

// ReserveCredits is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *billing.ReserveCreditsRequest
func (_e *BillingClient_Expecter) ReserveCredits(_a0 interface{}, _a1 interface{}) *BillingClient_ReserveCredits_Call {
	return &BillingClient_ReserveCredits_Call{Call: _e.mock.On("ReserveCredits", _a0, _a1)}
}

func (_c *BillingClient_ReserveCredits_Call) Run(run func(_a0 context.Context, _a1 *billing.ReserveCreditsRequest)) *BillingClient_ReserveCredits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.ReserveCreditsRequest))
	})
	return _c
}

func (_c *BillingClient_ReserveCredits_Call) Return(_a0 *billing.ReserveCreditsResponse, _a1 error) *BillingClient_ReserveCredits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BillingClient_ReserveCredits_Call) RunAndReturn(run func(context.Context, *billing.ReserveCreditsRequest) (*billing.ReserveCreditsResponse, error)) *BillingClient_ReserveCredits_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitWorkflowReceipt provides a mock function with given fields: _a0, _a1
func (_m *BillingClient) SubmitWorkflowReceipt(_a0 context.Context, _a1 *billing.SubmitWorkflowReceiptRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubmitWorkflowReceipt")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.SubmitWorkflowReceiptRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.SubmitWorkflowReceiptRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.SubmitWorkflowReceiptRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BillingClient_SubmitWorkflowReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitWorkflowReceipt'
type BillingClient_SubmitWorkflowReceipt_Call struct {
	*mock.Call
}

// SubmitWorkflowReceipt is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *billing.SubmitWorkflowReceiptRequest
func (_e *BillingClient_Expecter) SubmitWorkflowReceipt(_a0 interface{}, _a1 interface{}) *BillingClient_SubmitWorkflowReceipt_Call {
	return &BillingClient_SubmitWorkflowReceipt_Call{Call: _e.mock.On("SubmitWorkflowReceipt", _a0, _a1)}
}

func (_c *BillingClient_SubmitWorkflowReceipt_Call) Run(run func(_a0 context.Context, _a1 *billing.SubmitWorkflowReceiptRequest)) *BillingClient_SubmitWorkflowReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.SubmitWorkflowReceiptRequest))
	})
	return _c
}

func (_c *BillingClient_SubmitWorkflowReceipt_Call) Return(_a0 *emptypb.Empty, _a1 error) *BillingClient_SubmitWorkflowReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BillingClient_SubmitWorkflowReceipt_Call) RunAndReturn(run func(context.Context, *billing.SubmitWorkflowReceiptRequest) (*emptypb.Empty, error)) *BillingClient_SubmitWorkflowReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// NewBillingClient creates a new instance of BillingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBillingClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *BillingClient {
	mock := &BillingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
