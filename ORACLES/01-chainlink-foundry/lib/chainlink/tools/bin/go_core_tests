#!/usr/bin/env bash
set -o pipefail
set +e

SCRIPT_PATH=`dirname "$0"`; SCRIPT_PATH=`eval "cd \"$SCRIPT_PATH\" && pwd"`
OUTPUT_FILE=${OUTPUT_FILE:-"./output.txt"}
JUNIT_FILE=${JUNIT_FILE:-"./junit.xml"}
GO_TEST_TIMEOUT=${GO_TEST_TIMEOUT:-"15m"}

echo "Installing gotestsum..."
go install gotest.tools/gotestsum@v1.12.3
PATH=$PATH:$(go env GOPATH)/bin
export PATH

echo "Running go_core_tests for event: $GITHUB_EVENT_NAME"
GO_TEST_FLAGS="-timeout=${GO_TEST_TIMEOUT}"
if [[ "$GITHUB_EVENT_NAME" == 'push' ]]; then
  GO_TEST_FLAGS="$GO_TEST_FLAGS -count=1"
elif [[ "$GITHUB_EVENT_NAME" == 'schedule' ]]; then
  GO_TEST_FLAGS="$GO_TEST_FLAGS -covermode=atomic -coverpkg=./... -coverprofile=coverage.txt"
elif [[ "$GITHUB_EVENT_NAME" == 'pull_request' || "$GITHUB_EVENT_NAME" == 'merge_group' ]]; then
  RERUN_FLAGS="--rerun-fails-abort-on-data-race --rerun-fails=3"
fi

if [[ "$PRODUCE_JUNIT_XML" == "true" ]]; then
  JUNIT_FLAG="--junitfile=$JUNIT_FILE"
fi

echo "Using GO_TEST_FLAGS: $GO_TEST_FLAGS"
echo "Using RERUN_FLAGS: $RERUN_FLAGS"
echo "Using JUNIT_FLAG: $JUNIT_FLAG"

echo "Test execution results: ---------------------"
echo ""

gotestsum \
  --format='standard-quiet' \
  $RERUN_FLAGS \
  --packages='./...' \
  --jsonfile "$OUTPUT_FILE" \
  "$JUNIT_FLAG" \
  -- $GO_TEST_FLAGS

EXITCODE=${PIPESTATUS[0]}

# Assert no known sensitive strings present in test logger output
printf "\n----------------------------------------------\n\n"
echo "Beginning check of output logs for sensitive strings"
$SCRIPT_PATH/scrub_logs $OUTPUT_FILE
if [[ $? != 0 ]]; then
  exit 1
fi

echo "Exit code: $EXITCODE"
if [[ $EXITCODE != 0 ]]; then
  echo "Encountered test failures."
else
  echo "All tests passed!"
fi
exit $EXITCODE
